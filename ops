{"version":1,"ops":[{"type":5,"author":{"id":"10a6c294ee0a4a2dbcc825a6f8fa6f4de06ed826"},"timestamp":1562836649,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI0NzUyMjI1OTc="},"added":["Bug"],"removed":[]},{"type":3,"author":{"id":"410e29e613bc43e298228e4bf515d4ff96491a56"},"timestamp":1600564673,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5NTQyODEwMg==","github-url":"https://github.com/lstein/Perl-GD/issues/33#issuecomment-695428102"},"message":"Just as a follow up, its not just ignoring --options, but other flags as well. \n\nFor instance, --lib_gd_path does literally nothing, and its default mechanism is also wrong.\n\n```\nperl Makefile.PL -lib_gd_path /usr/libbogus/ -options ANIMGIF\nConfiguring for libgd version 2.3.0.\nIncluded Features:          GD_GIF GD_OPENPOLYGON GD_ZLIB GD_PNG GD_FREETYPE GD_FONTCONFIG GD_JPEG GD_XPM GD_TIFF GD_WEBP GD_UNCLOSEDPOLY GD_ANIMGIF GD_FTCIRCLE VERSION_33\nGD library used from:       /usr/lib\ngdlib-config used from the PATH\nWarning: prerequisite Test::Fork 0.02 not found.\nGenerating a Unix-style Makefile\nWriting Makefile for GD\nWriting MYMETA.yml and MYMETA.json\n```\n\n\"bogus\" never turns up in Makefile.PL , though its obviously wrong, it doesn't do anything right when you pass an actually right path like \"/usr/lib64/\"\n\nAnd the pkg-config stuff looks in the wrong places for config files on our architecture\n```bash\nqlist media-libs/gd | grep pc\n# /usr/lib64/pkgconfig/gdlib.pc\n# /usr/lib/pkgconfig/gdlib.pc\n```\n\nThe one in /usr/lib is for the 32bit compat ... and subsequently, if it uses \"/usr/lib/\" in the link line, bad things happen:\n```\nLD_RUN_PATH=\"/usr/lib\" cc  -shared  -fstack-protector-strong -fno-stack-protector -O3 -march=native -mtune=native -L/usr/local/lib  GD.o  -o blib/arch/auto/GD/GD.so  \\\n   -L/usr/lib -L/usr/lib64 -lgd   \\\n  \n/usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../x86_64-pc-linux-gnu/bin/ld: skipping incompatible /usr/lib/libgd.so when searching for -lgd\n/usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../x86_64-pc-linux-gnu/bin/ld: skipping incompatible /usr/lib/libc.so when searching for -lc\n/usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../x86_64-pc-linux-gnu/bin/ld: skipping incompatible /usr/lib/libc.a when searching for -lc\n```\n\nThis fortunately isn't a hard panic with GCC, but it *is* with clang. Because linking 64bit binaries to 32bit ones doesn't make any sense.","files":null},{"type":3,"author":{"id":"410e29e613bc43e298228e4bf515d4ff96491a56"},"timestamp":1600564743,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5NTQyOTc2Mg==","github-url":"https://github.com/lstein/Perl-GD/issues/33#issuecomment-695429762"},"message":"( also, there isn't even anything called 'gdlib-config' anywhere on this system, so the notice about \"using gdlib-config from PATH\" is a total misdirect )","files":null},{"type":3,"author":{"id":"410e29e613bc43e298228e4bf515d4ff96491a56"},"timestamp":1600665864,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5NTkwNTk2MQ==","github-url":"https://github.com/lstein/Perl-GD/issues/33#issuecomment-695905961"},"message":"Ugh, I tried to wade in and \"fix\" this, but I don't think its even fixable, I'm trying to find a polite way to describe how terrible this is to work with, because it makes me alternate between self-abuse trying to fix it, and pondering if we can purge it from our tree entirely, only to bounce back to self abuse due to being unable to purge it :(. \n\nBut not sure such a polite option exists.\n\nObviously I'm at a disadvantage because I can't even understand what half the code is *trying* to do, because looking at 50% of the code makes you go \"If that does that, why doesn't it actually do that\", but keeping the myriad of codepaths in your head at once hurts.","files":null},{"type":3,"author":{"id":"10a6c294ee0a4a2dbcc825a6f8fa6f4de06ed826"},"timestamp":1600950328,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5ODI5NzE4NA==","github-url":"https://github.com/lstein/Perl-GD/issues/33#issuecomment-698297184"},"message":"When you use the right syntax it will work. \n```\n$ perl Makefile.PL --lib_gd_path /opt/libgd/2.3.1-dev/lib --options ANIMGIF\nConfiguring for libgd version 2.3.0.\nIncluded Features:          GD_GIF GD_OPENPOLYGON GD_ZLIB GD_PNG GD_FREETYPE GD_FONTCONFIG GD_JPEG GD_XPM GD_TIFF GD_WEBP GD_UNCLOSEDPOLY GD_ANIMGIF GD_FTCIRCLE VERSION_33\nGD library used from:       /opt/libgd/2.3.1-dev/lib\ngdlib-config used from the PATH\nGenerating a Unix-style Makefile\nWriting Makefile for GD\nWriting MYMETA.yml and MYMETA.json\n```\nGetopt::Long requires a double dash, there are no single letter dash options defined.\n\ngdlib-config was the old way to find the options. This was deprecated upstream in libgd, and with pkg-config only there's no other way to find the supported options but probing. Currently we are defaulting to features by the libgd version. gdlib-config is the best option to define the features.\n\nThe wrong ExtUtils::PkgConfig prefix:\nIf you supply a proper --lib_gd_path the proper prefix is taken. If not the default from ExtUtils::PkgConfig will be taken, which is then a ExtUtils::PkgConfig problem. perl also has the habit to add a wrong /usr/local/lib to the libpath.\n\n--options ignored:\nCannot repro. Works for me. \nHowever is an old gdlib-config is found it overrides the cmdline --options.","files":null},{"type":6,"author":{"id":"10a6c294ee0a4a2dbcc825a6f8fa6f4de06ed826"},"timestamp":1600950328,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDAyMjE1NDUx"},"target":"5961354218e82e19f513e3b2a7909c895eb70b36b78731562b3dcadf09fc8041","message":"When you use the right syntax it will work. \n```\n$ perl Makefile.PL --lib_gd_path /opt/libgd/2.3.1-dev/lib --options ANIMGIF\nConfiguring for libgd version 2.3.0.\nIncluded Features:          GD_GIF GD_OPENPOLYGON GD_ZLIB GD_PNG GD_FREETYPE GD_FONTCONFIG GD_JPEG GD_XPM GD_TIFF GD_WEBP GD_UNCLOSEDPOLY GD_ANIMGIF GD_FTCIRCLE VERSION_33\nGD library used from:       /opt/libgd/2.3.1-dev/lib\ngdlib-config used from the PATH\nGenerating a Unix-style Makefile\nWriting Makefile for GD\nWriting MYMETA.yml and MYMETA.json\n```\nGetopt::Long requires a double dash, there are no single letter dash options defined.\n\ngdlib-config was the old way to find the options. This was deprecated upstream in libgd, and with pkg-config only there's no other way to find the supported options but probing. Currently we are defaulting to features by the libgd version. gdlib-config is the best option to define the features.\n\nThe wrong ExtUtils::PkgConfig prefix:\nIf you supply a proper --lib_gd_path the proper prefix is taken. If not the default from ExtUtils::PkgConfig will be taken, which is then a ExtUtils::PkgConfig problem. perl also has the habit to add a wrong /usr/local/lib to the libpath.\n\n--options ignored:\nCannot repro. Works for me. \nHowever is an old gdlib-config is found it overrides the cmdline --options. I changed that in the options branch, to completely override the proper options.","files":null},{"type":3,"author":{"id":"10a6c294ee0a4a2dbcc825a6f8fa6f4de06ed826"},"timestamp":1600952551,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5ODMyOTYzOQ==","github-url":"https://github.com/lstein/Perl-GD/issues/33#issuecomment-698329639"},"message":"--options override fixed with 2.73, however with an existing gdlib-config this is not recommended.","files":null},{"type":4,"author":{"id":"10a6c294ee0a4a2dbcc825a6f8fa6f4de06ed826"},"timestamp":1600952551,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzgwMzEwNTM2Mw=="},"status":2},{"type":3,"author":{"id":"410e29e613bc43e298228e4bf515d4ff96491a56"},"timestamp":1601157145,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5OTU1MjQzOA==","github-url":"https://github.com/lstein/Perl-GD/issues/33#issuecomment-699552438"},"message":"\u003e ```\n\u003e \n\u003e ```\n\u003e \n\u003e \n\u003e Getopt::Long requires a double dash, there are no single letter dash options defined.\n\nAh, sorry, that's a fair thing, my fuckup. Sorry. Looks like I inherited some code to look after that was doing this wrong ( and patched so it wouldn't error at that, for reasons lost into the aether, though I suspect related to some generic flags being possibly passed somewhere that may not be mapped ).\n\nHOPEFULLY I'll be able to get this mess cleaned up downstream.\n\n( We don't have any gdlib-config anywhere whatsoever anymore, due to said deprecation )\n\n\u003e perl also has the habit to add a wrong /usr/local/lib to the libpath.\n\n*usually* this is straight foward to fix, at least for us, partly because our perl might be built without hints of that issue. *usually* the only thing that trips into doing this is silly code in ExtUtils:: stuff (and  my god is there a lot of silly stuff in there, don't set `LD=ld` unless you want to be sorry ), or hard-coded logic in Build/Makefile.PL that thinks it makes sense.\n\nThough the overall point remains that the present Makefile.PL is chaos incarnate, and if it could be structured in a more straight-foward way that is more amenable to making it obvious *what* needs patching *if* something needs patching, would go a long way, but I feel it might make more sense for somebody who understands the full weight of \"what do we actually need to do here\" to write it from scratch.\n\nParticularly with CPAN stuff, the thing most people do is \"stuff a thousand different ways of heuristically doing automagic based on whatever happens to be present to make the best chance at getting something working\", which does make sense for CPAN, but for a vendor, its a nightmare, as we'd much rather an explicitly defined control, and if the explicitly defined controls are wrong, to simply hard error instead of trying something else, in order to demand the vendor work out what the \"right\" controls are to pass.\n\nJust because something seems to be available on some path accessible on some filesystem, doesn't mean we ever actually want that to be used.","files":null}]}